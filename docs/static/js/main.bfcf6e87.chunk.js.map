{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAGRC,mBAAS,IAHD,mBAGrCC,EAHqC,KAGzBC,EAHyB,KAuB5C,OAEI,aADA,CACA,QAAMC,SAdW,SAACC,GAElBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAOlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAvBc,SAACP,GAEvBF,EAAeE,EAAEQ,OAAOF,a,+BCTnBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,0DAE6CC,UAAUH,GAFvD,uDAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAiBZM,GAjBY,4CAAH,sDCGPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OAFAc,QAAQC,IAAIL,EAAOV,GAGf,sBAAKgB,UAAU,yCAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCLHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECHX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA8BtC,OAvBAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAC,GAGEH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAO1B,CAACtB,IASGuB,EDtBwBK,CAAa5B,GAAhCa,EALuB,EAK5BN,KAAae,EALe,EAKfA,QAapB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SASYL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAIQA,GAHCA,EAAIC,aErC5BkB,EAAe,WAAM,MAIM3C,mBAAS,CAAC,mBAJhB,mBAIvB4C,EAJuB,KAIX7C,EAJW,KAc9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAKQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MC3BjC+B,IAASC,OACP,cAAC,EAAD,IACEC,SAASC,eAAe,W","file":"static/js/main.bfcf6e87.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    // const [inputValue, setInputValue] = useState('Escriba aquí...');\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    // Captura el texto de la caja de texto\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue( e.target.value );\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        // Evita que se recargue la página completa\r\n        e.preventDefault();\r\n\r\n        if(inputValue.trim().length > 2){\r\n            // console.log('Submit hecho');\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        // Se quita el fragment ya que el formulario se encarga de agrupar todos los elementos (seria redundante)\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","// asynx --> regresa una promesa que resuelve coleccion de imagenes\r\n\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category) }Z&api_key=0yyLINebjIX7rDU9vqfBoIZ71Uv3TcSE`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            // ? --> operador de navegación segura o encadenamiento opcional.\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    // console.log(gifs);\r\n    // setimages(gifs);\r\n    return gifs;\r\n\r\n}","import React from 'react';\r\n\r\n// export const GifGridItem = (props) => {    --> Para trabajar con {...img}\r\n//     console.log(props);\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    console.log(title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// import React, {useState, useEffect} from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [count, setcount] = useState(0);\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n    // // se utiliza para que se recargue una sola vez al inicio y no cada vez que se modifique algo\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         // .then(imgs => setImages(imgs))\r\n    //         .then(setImages)\r\n    // }, [category]);\r\n    // // Si la categoria cambia, vuelve a ejecutar el effect\r\n\r\n\r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n            {/* {loading ? <p>Cargando...</p> : <p>Cargado completo</p>} */}\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {/* <h3>{count}</h3>\r\n                <button onClick={ () => setcount(count + 1)}></button> */}\r\n                {/* <ol> */}\r\n                    {\r\n                        // images.map(img => (\r\n                        // <li key={img.id}>{img.title}</li>\r\n                        // ))\r\n\r\n                        images.map( img => (\r\n                            <GifGridItem\r\n                                key={img.id}\r\n                                // img={img}\r\n                                // Se envía cada una de las propiedades de las imagenes, como una propiedad independiente\r\n                                {...img}\r\n                            />\r\n                    ))\r\n\r\n\r\n\r\n\r\n                    }\r\n                {/* </ol> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category) \r\n            .then(imgs => {\r\n        \r\n                // setTimeout(() => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    })\r\n                \r\n            // }, 3000);\r\n\r\n        })\r\n\r\n    }, [category]);\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state; // state --> { data: [], loading: true}\r\n\r\n}\r\n","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['Death Note', 'Dragon Ball Z', 'Pokemon'];\r\n    // const [categories, setCategories] = useState(['Death Note', 'Dragon Ball Z', 'Pokemon']);\r\n    const [categories, setCategories] = useState(['Homero Simpson']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // categories.push('Digimon'); NO USAR\r\n    //     // se mantienen las categorías anteriores y se agrega una nueva\r\n    //     // setCategories([...categories, 'Digimon']); se agrega al final\r\n    //     // setCategories(['Digimon', ...categories]);\r\n    //     setCategories(cats => [...cats, 'Digimon']);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr/>\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    // categories.map((category) => {\r\n                    // return <li key={category}> {category} </li>\r\n                    // })\r\n                    categories.map(category => (\r\n                        <GifGrid \r\n                            key={category}\r\n                            category={category} \r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render( \n  <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();"],"sourceRoot":""}